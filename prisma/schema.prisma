generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  hashedPassword String?
  role           String    @default("ADMIN")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  sessions       Session[]
  accounts       Account[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id               String   @id @default(cuid())
  slug             String   @unique
  title            String
  shortDescription String
  description      String
  priceIDR         Int
  salePriceIDR     Int?
  images           String
  fileKey          String
  isActive         Boolean  @default(true)
  tags             String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  downloadTokens   DownloadToken[]
}

model Order {
  id             String   @id @default(cuid())
  orderNumber    String   @unique
  items          String
  customer       String
  totalIDR       Int
  currency       String   @default("IDR")
  status         String   @default("pending")
  paymentGateway String
  paymentRef     String?
  invoiceUrl     String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  downloadTokens DownloadToken[]
}

model DownloadToken {
  id               String   @id @default(cuid())
  orderId          String
  productId        String
  token            String   @unique
  expiresAt        DateTime
  maxDownloads     Int      @default(3)
  timesDownloaded  Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  order            Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product          Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Settings {
  id           String   @id @default(cuid())
  storeName    String
  storeLogoUrl String?
  contactEmail String
  payment      String
  storage      String
  policy       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
